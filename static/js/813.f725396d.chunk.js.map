{"version":3,"file":"static/js/813.f725396d.chunk.js","mappings":"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","sources":["components/Common/Button/style.js","components/Common/Button/Button.jsx","components/Common/Fieldset/style.js","components/Common/Fieldset/Fieldset.jsx","components/Common/Form/style.js","components/Common/Form/Form.jsx","components/Common/Input/style.js","components/Common/Input/Input.jsx","components/Common/Title/style.js","components/Common/Title/Title.jsx","components/Common/ValidateText/style.js","components/Common/ValidateText/ValidateText.jsx","hooks/useInputValidate.js","components/User/Profile/style.js","components/User/Profile/Profile.jsx","components/Common/Modal/style.js","components/Common/Modal/Modal.jsx","pages/ModifyProfile/style.js","pages/ModifyProfile/index.jsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\nexport const buttonSize = {\n  large: css`\n    width: 380px;\n    height: 58px;\n    font-size: 22px;\n  `,\n  medium: css`\n    width: 240px;\n    height: 50px;\n    font-size: 19px;\n  `,\n  small: css`\n    width: 100px;\n    height: 35px;\n    font-size: 15px;\n  `,\n  default: css`\n    width: 100%;\n    height: 40px;\n    font-size: 16px;\n  `,\n};\n\nexport const buttonColor = {\n  primary: css`\n    background-color: ${(props) => props.theme.COLOR.CYAN_300};\n  `,\n  secondary: css`\n    background-color: ${(props) => props.theme.COLOR.GREY_500};\n  `,\n  tertiary: css`\n    background-color: ${(props) => props.theme.COLOR.PRIMARY_RED};\n  `,\n};\n\nexport const Button = styled.button`\n  color: ${({ theme }) => theme.COLOR.WHITE};\n  border: none;\n  cursor: pointer;\n  font-family: ${({ theme }) => theme.FONT.SECONDARY};\n  ${({ size }) => buttonSize[size]}\n  ${({ colorType }) => buttonColor[colorType]}\n`;\n","import PropTypes from 'prop-types';\nimport { buttonColor, buttonSize } from './style';\nimport * as Styled from './style';\n\nconst Button = ({ colorType, size = 'default', children, ...props }) => {\n  return (\n    <Styled.Button type=\"button\" colorType={colorType} size={size} {...props}>\n      {children}\n    </Styled.Button>\n  );\n};\n\nButton.propTypes = {\n  colorType: PropTypes.oneOf(Object.keys(buttonColor)),\n  size: PropTypes.oneOf(Object.keys(buttonSize)),\n  children: PropTypes.string,\n};\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.fieldset`\n  border: 0;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as Styled from './style';\n\nconst Fieldset = ({ children }) => {\n  return <Styled.Wrapper>{children}</Styled.Wrapper>;\n};\n\nFieldset.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Fieldset;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 50%;\n  min-width: 300px;\n  max-width: 400px;\n  height: auto;\n  padding: 30px 0;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\n","import * as Styled from './style';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ children, onSubmit }) => {\n  return <Styled.Form onSubmit={onSubmit}>{children}</Styled.Form>;\n};\n\nForm.propTypes = {\n  children: PropTypes.node,\n  onSubmit: PropTypes.func,\n};\n\nexport default Form;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.label`\n  max-width: 400px;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 8px 16px;\n  border-radius: 4px;\n  border: 1px solid ${({ theme }) => theme.COLOR.GREY_300};\n`;\n\nexport const Description = styled.p`\n  font-size: 12px;\n  margin-left: 4px;\n  margin-bottom: 4px;\n`;\n","import * as Styled from './style';\nimport PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n\nconst Input = ({ description = '이메일', ...props }, ref) => {\n  return (\n    <Styled.Wrapper>\n      <Styled.Description>{description}</Styled.Description>\n      <Styled.Input ref={ref} {...props} />\n    </Styled.Wrapper>\n  );\n};\n\nInput.propTypes = {\n  description: PropTypes.string,\n  ref: PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n};\n\nexport default forwardRef(Input);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: ${({ theme }) => theme.FONT.PRIMARY};\n`;\n\nexport const Line = styled.hr`\n  width: 100%;\n  border-color: ${({ theme }) => theme.COLOR.BLACK};\n  margin-top: 15px;\n`;\n","import PropTypes from 'prop-types';\nimport * as Styled from './style';\n\nconst Title = ({ contents }) => {\n  return (\n    <Styled.Wrapper>\n      <h2>{contents}</h2>\n      <Styled.Line />\n    </Styled.Wrapper>\n  );\n};\n\nTitle.propTypes = {\n  contents: PropTypes.string,\n};\n\nexport default Title;\n","import styled, { css } from 'styled-components';\n\nconst textColor = {\n  success: css`\n    color: ${({ theme }) => theme.COLOR.PRIMARY_GREEN};\n  `,\n  error: css`\n    color: ${({ theme }) => theme.COLOR.PRIMARY_RED};\n  `,\n};\n\nexport const Wrapper = styled.span`\n  ${({ validType }) => textColor[validType]};\n`;\n","import * as Styled from './style';\nimport PropTypes from 'prop-types';\n\nconst ValidateText = ({ isValid, text = '' }) => {\n  return (\n    <Styled.Wrapper validType={isValid ? 'success' : 'error'}>\n      {text}\n    </Styled.Wrapper>\n  );\n};\n\nValidateText.propTypes = {\n  isValid: PropTypes.bool,\n  text: PropTypes.string,\n};\n\nexport default ValidateText;\n","import { useState } from 'react';\n\nconst useInputValidate = ({\n  validation,\n  validationAsync,\n  errorMsg,\n  successMsg,\n}) => {\n  const [validResult, setValidResult] = useState({\n    isValid: false,\n    text: '',\n  });\n\n  const handleBlur = (args) => async (e) => {\n    const value = e.target.value;\n    const isValid = args ? validation(args, value) : validation(value);\n\n    if (isValid && typeof validationAsync === 'function') {\n      try {\n        await validationAsync(value);\n\n        setValidResult({\n          isValid,\n          text: successMsg,\n        });\n      } catch (err) {\n        setValidResult({\n          isValid: false,\n          text: err.message,\n        });\n      }\n\n      return;\n    }\n\n    setValidResult({\n      isValid,\n      text: isValid ? successMsg : errorMsg,\n    });\n  };\n\n  return { isValid: validResult.isValid, handleBlur, text: validResult.text };\n};\n\nexport default useInputValidate;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 300px;\n  height: 400px;\n  border-radius: 8px;\n  border: 1px solid ${({ theme }) => theme.COLOR.BLACK};\n  overflow: hidden;\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n`;\n\nexport const Info = styled.div`\n  width: 100%;\n  font-size: 18px;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Title = styled.div`\n  color: ${({ theme }) => theme.COLOR.GREY_300};\n`;\n\nexport const NameConverter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  border-radius: 8px;\n  padding: 8px 12px;\n  cursor: pointer;\n`;\n","import * as Styled from './style';\nimport profileDefaultImg from 'assets/png/profileDefaultImg.png';\nimport PropTypes from 'prop-types';\n\nimport { useEffect, useState } from 'react';\nimport { useAuth } from 'hooks/useAuth';\n\nconst CONVERT_MODE = 'CONVERT_MODE';\nconst CONFIRM_MODE = 'CONFIRM_MODE';\n\nconst Profile = ({ name }) => {\n  const { updateNameApi } = useAuth();\n  const [mode, setMode] = useState(CONFIRM_MODE);\n  const [newName, setNewName] = useState(name);\n\n  const handleChangeName = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleClickConfirmButton = () => {\n    setMode(CONVERT_MODE);\n  };\n\n  const handleClickConvertButton = () => {\n    updateNameApi({ name: newName }).then(() => {\n      setMode(CONFIRM_MODE);\n    });\n  };\n\n  useEffect(() => {\n    setNewName(name);\n  }, [name]);\n\n  return (\n    <Styled.Wrapper>\n      <Styled.Image src={profileDefaultImg} alt=\"프로필 사진\" />\n      <Styled.Info>\n        <Styled.Title>회원</Styled.Title>\n        <Styled.NameConverter>\n          {mode === CONFIRM_MODE ? (\n            <>\n              <span>{newName}</span>\n              <Styled.Button onClick={handleClickConfirmButton}>\n                수정\n              </Styled.Button>\n            </>\n          ) : (\n            <>\n              <input value={newName} onChange={handleChangeName} type=\"text\" />\n              <Styled.Button onClick={handleClickConvertButton}>\n                확인\n              </Styled.Button>\n            </>\n          )}\n        </Styled.NameConverter>\n      </Styled.Info>\n    </Styled.Wrapper>\n  );\n};\n\nProfile.propTypes = {\n  name: PropTypes.string,\n};\n\nexport default Profile;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  z-index: 1002;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Dimmer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: #00000080;\n  z-index: 1003;\n  cursor: pointer;\n`;\n\nexport const Contents = styled.div`\n  background-color: ${({ theme }) => theme.COLOR.WHITE};\n  width: 50%;\n  min-width: 300px;\n  max-width: 400px;\n  min-height: 300px;\n  height: auto;\n  padding: 30px 0;\n  display: flex;\n  flex-direction: column;\n  border-radius: 8px;\n  z-index: 1004;\n`;\n\nexport const IconWrapper = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  margin-top: 8px;\n  margin-right: 8px;\n  color: ${({ theme }) => theme.COLOR.PRIMARY_RED};\n  cursor: pointer;\n`;\n\nexport const ChildrenWrapper = styled.div`\n  width: 90%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport * as Styled from './style';\nimport { GiCancel } from 'react-icons/gi';\n\nconst Modal = ({ children, isModalOpened, closeModal }) => {\n  const element = document.getElementById('modal-portal');\n\n  return isModalOpened && element\n    ? ReactDOM.createPortal(\n        <Styled.Wrapper>\n          <Styled.Dimmer onClick={closeModal} />\n          <Styled.Contents>\n            <Styled.IconWrapper onClick={closeModal}>\n              <GiCancel size={20} />\n            </Styled.IconWrapper>\n            <Styled.ChildrenWrapper>{children}</Styled.ChildrenWrapper>\n          </Styled.Contents>\n        </Styled.Wrapper>,\n        element,\n      )\n    : null;\n};\n\nModal.propTypes = {\n  children: PropTypes.element,\n  isModalOpened: PropTypes.bool,\n  closeModal: PropTypes.func,\n};\n\nexport default Modal;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  margin: 50px;\n`;\n\nexport const Contents = styled.div`\n  width: 50%;\n  min-width: 300px;\n  max-width: 400px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n  margin-top: 30px;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  width: 100%;\n`;\n","import { useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Profile from 'components/User/Profile/Profile';\nimport Title from 'components/Common/Title/Title';\nimport Button from 'components/Common/Button/Button';\nimport Modal from 'components/Common/Modal/Modal';\nimport Form from 'components/Common/Form/Form';\nimport Input from 'components/Common/Input/Input';\nimport Fieldset from 'components/Common/Fieldset/Fieldset';\nimport ValidateText from 'components/Common/ValidateText/ValidateText';\n\nimport useInputValidate from 'hooks/useInputValidate';\nimport PropTypes from 'prop-types';\nimport * as Styled from './style';\nimport { PASSWORD_REGEX } from 'constants';\nimport { useAuth } from 'hooks/useAuth';\n\nconst ModifyProfile = () => {\n  const { updatePasswordApi, unRegisterApi } = useAuth();\n  const { name } = useSelector((state) => state.user);\n  const [openChangePassworModal, setOpenChangePasswordModal] = useState(false);\n  const [openWithdrawalModal, setOpenWithdrawalModal] = useState(false);\n\n  const handleSubmitChangeSubmit = (isValid) => (e) => {\n    e.preventDefault();\n    if (!isValid) {\n      return;\n    }\n\n    const {\n      oldPassword: { value: oldPassword },\n      password: { value: password },\n    } = e.target.elements;\n\n    updatePasswordApi({\n      oldPassword,\n      newPassword: password,\n    }).then(() => {\n      setOpenChangePasswordModal(false);\n    });\n  };\n\n  const handleSubmitWithdrawal = (e) => {\n    e.preventDefault();\n\n    // TODO 비밀번호 타이핑 하는 거 말고 다른 방식으로 바꿀 것!\n    // const {\n    //   password: { value: password },\n    // } = e.target.elements;\n\n    unRegisterApi().then(() => {\n      setOpenWithdrawalModal(false);\n    });\n  };\n\n  return (\n    <Styled.Wrapper>\n      <Title contents=\"회원정보 수정\" />\n      <Styled.Contents>\n        <Profile name={name} />\n        <Styled.ButtonContainer>\n          <Button\n            colorType=\"primary\"\n            onClick={() => setOpenChangePasswordModal(true)}\n          >\n            비밀번호 수정\n          </Button>\n          <Button\n            colorType=\"tertiary\"\n            onClick={() => setOpenWithdrawalModal(true)}\n          >\n            회원 탈퇴\n          </Button>\n        </Styled.ButtonContainer>\n      </Styled.Contents>\n      <Modal\n        isModalOpened={openChangePassworModal}\n        closeModal={() => setOpenChangePasswordModal(false)}\n      >\n        <ChangePassword onSubmit={handleSubmitChangeSubmit} />\n      </Modal>\n      <Modal\n        isModalOpened={openWithdrawalModal}\n        closeModal={() => setOpenWithdrawalModal(false)}\n      >\n        <Withdrawal onSubmit={handleSubmitWithdrawal} />\n      </Modal>\n    </Styled.Wrapper>\n  );\n};\n\nconst ChangePassword = ({ onSubmit }) => {\n  const newPwd = useRef(null);\n  const {\n    isValid: isOldPasswordValid,\n    handleBlur: handleOldPasswordBlur,\n    text: oldPasswordValidText,\n  } = useInputValidate({\n    validation: (args) => args.trim().length > 0,\n    successMsg: '',\n    errorMsg: '비밀번호를 입력해 주세요.',\n  });\n\n  const {\n    isValid: isNewPasswordValid,\n    handleBlur: handleNewPasswordBlur,\n    text: newPasswordValidText,\n  } = useInputValidate({\n    validation: (args) => PASSWORD_REGEX.test(args),\n    successMsg: '안전한 비밀번호입니다!',\n    errorMsg:\n      '영문 대소문자, 특수문자(!, @, ?, -) 를 포함한 6글자 이상 사용하세요.',\n  });\n\n  const {\n    isValid: isNewPasswordCheckValid,\n    handleBlur: handleNewPasswordCheckBlur,\n    text: newPasswordCheckValidText,\n  } = useInputValidate({\n    validation: (args1, args2) => args1 === args2,\n    successMsg: '비밀번호가 일치합니다!',\n    errorMsg: '비밀번호가 일치하지 않습니다.',\n  });\n\n  const isAllValid =\n    isOldPasswordValid && isNewPasswordValid && isNewPasswordCheckValid;\n\n  return (\n    <>\n      <Title contents=\"비밀번호 수정\" />\n      <Form onSubmit={onSubmit(isAllValid)}>\n        <Fieldset>\n          <Input\n            description=\"비밀번호\"\n            placeholder=\"기존 비밀번호를 입력하세요.\"\n            onBlur={handleOldPasswordBlur()}\n            name=\"oldPassword\"\n            type=\"password\"\n          />\n          <ValidateText\n            text={oldPasswordValidText}\n            isValid={isOldPasswordValid}\n          />\n        </Fieldset>\n        <Fieldset>\n          <Input\n            ref={newPwd}\n            description=\"새로운 비밀번호\"\n            placeholder=\"새로운 비밀번호를 입력하세요.\"\n            onBlur={handleNewPasswordBlur()}\n            name=\"password\"\n            type=\"password\"\n          />\n          <ValidateText\n            text={newPasswordValidText}\n            isValid={isNewPasswordValid}\n          />\n        </Fieldset>\n        <Fieldset>\n          <Input\n            description=\"새로운 비밀번호 확인\"\n            placeholder=\"새로운 비밀번호를 확인하세요.\"\n            onBlur={handleNewPasswordCheckBlur(newPwd.current?.value)}\n            name=\"passwordCheck\"\n            type=\"password\"\n          />\n          <ValidateText\n            text={newPasswordCheckValidText}\n            isValid={isNewPasswordCheckValid}\n          />\n        </Fieldset>\n        <Button colorType=\"primary\" type=\"submit\">\n          완료\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nconst Withdrawal = ({ onSubmit }) => {\n  const {\n    isValid: isPasswordValid,\n    handleBlur: handlePasswordBlur,\n    text: passwordValidText,\n  } = useInputValidate({\n    validation: (args) => args.trim().length > 0,\n    successMsg: '',\n    errorMsg: '비밀번호를 입력해 주세요.',\n  });\n  return (\n    <>\n      <Title contents=\"회원 탈퇴\" />\n      <Form onSubmit={onSubmit}>\n        <Fieldset>\n          <Input\n            description=\"비밀번호\"\n            placeholder=\"비밀번호를 입력하세요.\"\n            onBlur={handlePasswordBlur()}\n            name=\"password\"\n            type=\"password\"\n          />\n          <ValidateText text={passwordValidText} isValid={isPasswordValid} />\n        </Fieldset>\n        <Button colorType=\"tertiary\" type=\"submit\">\n          탈퇴\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nChangePassword.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nWithdrawal.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default ModifyProfile;\n"],"names":["buttonSize","large","css","medium","small","default","buttonColor","primary","props","theme","COLOR","CYAN_300","secondary","GREY_500","tertiary","PRIMARY_RED","Button","styled","WHITE","FONT","SECONDARY","size","colorType","children","type","Wrapper","Form","onSubmit","Input","GREY_300","Description","ref","description","forwardRef","PRIMARY","Line","BLACK","contents","textColor","success","PRIMARY_GREEN","error","validType","isValid","text","validation","validationAsync","errorMsg","successMsg","useState","validResult","setValidResult","handleBlur","args","e","value","target","message","Image","Info","Title","NameConverter","CONFIRM_MODE","name","updateNameApi","useAuth","mode","setMode","newName","setNewName","useEffect","src","profileDefaultImg","alt","onClick","onChange","then","Dimmer","Contents","IconWrapper","ChildrenWrapper","isModalOpened","closeModal","element","document","getElementById","ReactDOM","ButtonContainer","ChangePassword","newPwd","useRef","useInputValidate","trim","length","isOldPasswordValid","handleOldPasswordBlur","oldPasswordValidText","PASSWORD_REGEX","isNewPasswordValid","handleNewPasswordBlur","newPasswordValidText","args1","args2","isNewPasswordCheckValid","handleNewPasswordCheckBlur","newPasswordCheckValidText","isAllValid","Fieldset","placeholder","onBlur","ValidateText","current","Withdrawal","isPasswordValid","handlePasswordBlur","passwordValidText","updatePasswordApi","unRegisterApi","useSelector","state","user","openChangePassworModal","setOpenChangePasswordModal","openWithdrawalModal","setOpenWithdrawalModal","preventDefault","elements","oldPassword","password","newPassword"],"sourceRoot":""}